using System;
using System.Collections.Generic;
using Microsoft.ML.Transforms;

namespace Microsoft.ML.Samples.Dynamic
{
    public static class CustomMappingSaveAndLoad
    {
        public static void Example()
        {
            // Create a new ML context, for ML.NET operations. It can be used for exception tracking and logging, 
            // as well as the source of randomness.
            var mlContext = new MLContext();

            // Get a small dataset as an IEnumerable and convert it to an IDataView.
            var rawData = GetData();

            // Printing the input data. 
            Console.WriteLine("Age\t Salary");
            foreach (var row in rawData)
                Console.WriteLine($"{row.Age}\t {row.Salary}");
            // Expected output:
            // Age      Salary
            // 26       40000
            // 35       80000
            // 34       10000
            // 28       100000

            var data = mlContext.Data.LoadFromEnumerable(rawData);

            // Custom transformations can be used to transform data directly, or as part of a pipeline. Below we transform data directly.
            var estimator = mlContext.Transforms.CustomMapping(new IsUnderThirtyCustomAction().GetMapping(), contractName: "IsUnderThirty");
            var transform = estimator.Fit(data);

            // To save and load the CustomMapping estimator, the assembly in which the custom action is defined needs to be registered in the
            // environment. The following registers the assembly where IsUnderThirtyCustomAction is defined.    
            mlContext.ComponentCatalog.RegisterAssembly(typeof(IsUnderThirtyCustomAction).Assembly);

            // Now the transform pipeline can be saved and loaded through the usual MLCOntext method. 
            mlContext.Model.Save(transform, data.Schema, "customTransform.zip");
            var loadedTransform = mlContext.Model.Load("customTransform.zip", out var inputSchema);

            // Transform the data using the CustomMapping transform that was saved and loaded.
            var transformedData = loadedTransform.Transform(data);

            // Printing the output data.
            var dataEnumerable = mlContext.Data.CreateEnumerable<TransformedData>(transformedData, reuseRowObject: true);
            Console.WriteLine("Age\t Salary\t IsUnderThirty");
            foreach (var row in dataEnumerable)
                Console.WriteLine($"{row.Age}\t {row.Salary}\t {row.IsUnderThirty}");
            // Expected output:
            // Age      Salary  IsUnderThirty
            // 26       40000   True
            // 35       80000   False
            // 34       10000   False
            // 28       100000  True  
        }

        // The custom action needs to implement the abstract class CustomMappingFactory, and needs to have attribute
        // CustomMappingFactoryAttribute with argument equal to the contractName used to define the CustomMapping estimator
        // which uses the action.
        [CustomMappingFactoryAttribute("IsUnderThirty")]
        public class IsUnderThirtyCustomAction : CustomMappingFactory<InputData, CustomMappingOutput>
        {
            // We define the custom mapping between input and output rows that will be applied by the transformation.
            public static void CustomAction(InputData input, CustomMappingOutput output)
                => output.IsUnderThirty = input.Age < 30;

            public override Action<InputData, CustomMappingOutput> GetMapping()
                => CustomAction;
        }

        // Defines only the column to be generated by the custom mapping transformation in addition to the columns already present.
        public class CustomMappingOutput
        {
            public bool IsUnderThirty { get; set; }
        }

        // Defines the schema of the input data.
        public class InputData
        {
            public float Age { get; set; }
            public float Salary { get; set; }
        }

        // Defines the schema of the transformed data, which includes the new column IsUnderThirty.
        public class TransformedData
        {
            public float Age { get; set; }
            public float Salary { get; set; }
            public bool IsUnderThirty { get; set; }

        }

        // Returns an enumerable of input rows.
        public static IEnumerable<InputData> GetData()
        {
            return new List<InputData>
            {
                new InputData {
                    Age = 26,
                    Salary = 40000,
                },
                new InputData {
                    Age = 35,
                    Salary = 80000,
                },
                new InputData {
                    Age = 34,
                    Salary = 10000,
                },
                new InputData {
                    Age = 28,
                    Salary = 100000,
                },
            };
        }
    }
}
